{"version":3,"file":"static/js/988.a6deaea7.chunk.js","mappings":"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","sources":["MainApp.jsx"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {\r\n  DELIV_KEY_STRING,\r\n  MAX_DELIVS,\r\n  SCENARIO_KEY_STRING,\r\n  objectivesData,\r\n} from \"./data/objectivesData\";\r\nimport { ticksExact } from \"./bucket-lib/utils\";\r\nimport BucketGlyph from \"./bucket-lib/BucketGlyph\";\r\nimport DotHistogram from \"./DotHistogram\";\r\nimport DotHistogramSmall from \"./DotHistogramSmall\";\r\nimport classNames from \"classnames\";\r\nimport { criteriaSort } from \"./utils\";\r\n\r\nconst DEFAULT_GOAL = 200;\r\nconst DEFAULT_OBJECTIVE_NAME = \"DEL_CVP_PAG_N\";\r\nconst DEFAULT_SCEN_NAME = \"expl0000\";\r\nconst DEFAULT_SORT_MODE = \"median\";\r\n\r\nconst AppContext = createContext({});\r\n\r\nexport default function MainApp({ data = objectivesData }) {\r\n  const { current: objectiveNames } = useRef(Object.keys(data));\r\n\r\n  const {\r\n    goal,\r\n    showScens,\r\n    sortMode,\r\n    curObjectiveName,\r\n    curScenName,\r\n    curScenNamePreview,\r\n\r\n    setGoal,\r\n    setShowScens,\r\n    setSortMode,\r\n    setCurObjectiveName,\r\n    setCurScenName,\r\n    setCurScenNamePreview,\r\n  } = useInterface();\r\n\r\n  // calculating these often is laggy. cache.\r\n  const { curDelivInterps, curOrderedScenNames } = useCaches(\r\n    data,\r\n    objectiveNames,\r\n    curObjectiveName,\r\n    curScenName,\r\n    curScenNamePreview,\r\n    sortMode\r\n  );\r\n\r\n  // gotta memoize so bucket animations trigger\r\n  const curMainInterp = useMemo(\r\n    () => curDelivInterps[curObjectiveName],\r\n    [curObjectiveName, curDelivInterps]\r\n  );\r\n\r\n  const curScenNameDisplayed = curScenNamePreview || curScenName;\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        data,\r\n        goal,\r\n        curObjectiveName,\r\n        curScenName,\r\n        curScenNamePreview,\r\n        curOrderedScenNames,\r\n      }}\r\n    >\r\n      <div className=\"dashboard\">\r\n        <div className=\"scen-input\">\r\n          <button\r\n            onClick={() => {\r\n              setCurScenName(\r\n                curOrderedScenNames[\r\n                  Math.max(curOrderedScenNames.indexOf(curScenName) - 1, 0)\r\n                ]\r\n              );\r\n            }}\r\n          >\r\n            ⟨\r\n          </button>\r\n          <button\r\n            className=\"scen-picker\"\r\n            onClick={() => {\r\n              setShowScens((s) => !s);\r\n            }}\r\n          >\r\n            <span>Scenario</span>\r\n            <span>{curScenNameDisplayed}</span>\r\n            <span>{sortMode} →</span>\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setCurScenName(\r\n                curOrderedScenNames[\r\n                  Math.min(\r\n                    curOrderedScenNames.indexOf(curScenName) + 1,\r\n                    curOrderedScenNames.length - 1\r\n                  )\r\n                ]\r\n              );\r\n            }}\r\n          >\r\n            ⟩\r\n          </button>\r\n        </div>\r\n        <MainBucket levelInterp={curMainInterp} />\r\n        <div className=\"pdf-container\">\r\n          <DotHistogram\r\n            data={\r\n              data[curObjectiveName][SCENARIO_KEY_STRING][curScenNameDisplayed][\r\n                DELIV_KEY_STRING\r\n              ]\r\n            }\r\n            goal={goal}\r\n            setGoal={setGoal}\r\n          />\r\n        </div>\r\n        <div className=\"other-buckets-container\">\r\n          {objectiveNames.map((objectiveName) => (\r\n            <SmallBucketTile\r\n              key={objectiveName}\r\n              label={objectiveName}\r\n              active={objectiveName !== curObjectiveName}\r\n              onClick={() => {\r\n                setCurObjectiveName(objectiveName);\r\n              }}\r\n            >\r\n              <BucketGlyph\r\n                levelInterp={curDelivInterps[objectiveName]}\r\n                width={50}\r\n                height={50}\r\n              />\r\n            </SmallBucketTile>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {showScens && (\r\n        <Overlay\r\n          sortMode={sortMode}\r\n          setSortMode={setSortMode}\r\n          setCurScenName={setCurScenName}\r\n          setCurScenNamePreview={setCurScenNamePreview}\r\n          exitFn={() => void setShowScens(false)}\r\n        />\r\n      )}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\n//\r\n// custom hooks\r\n//\r\n\r\nfunction useInterface() {\r\n  const [goal, setGoal] = useState(DEFAULT_GOAL);\r\n  const [showScens, setShowScens] = useState(false);\r\n  const [sortMode, setSortMode] = useState(DEFAULT_SORT_MODE);\r\n\r\n  const [curObjectiveName, setCurObjectiveName] = useState(\r\n    DEFAULT_OBJECTIVE_NAME\r\n  );\r\n\r\n  const [curScenName, setCurScenName] = useState(DEFAULT_SCEN_NAME);\r\n  const [curScenNamePreview, setCurScenNamePreview] = useState(null);\r\n\r\n  return {\r\n    goal,\r\n    setGoal,\r\n    showScens,\r\n    setShowScens,\r\n    sortMode,\r\n    setSortMode,\r\n    curObjectiveName,\r\n    setCurObjectiveName,\r\n    curScenName,\r\n    setCurScenName,\r\n    curScenNamePreview,\r\n    setCurScenNamePreview,\r\n  };\r\n}\r\n\r\nfunction useCaches(\r\n  data,\r\n  objectiveNames,\r\n  curObjectiveName,\r\n  curScenName,\r\n  curScenNamePreview,\r\n  sortMode\r\n) {\r\n  const curOrderedScenNames = useMemo(\r\n    () => criteriaSort(sortMode, data, curObjectiveName),\r\n    [sortMode, curObjectiveName]\r\n  );\r\n\r\n  const curDelivInterps = useMemo(\r\n    () =>\r\n      createInterps(data, objectiveNames, curScenNamePreview || curScenName),\r\n    [curScenName, curScenNamePreview]\r\n  );\r\n\r\n  return {\r\n    curDelivInterps,\r\n    curOrderedScenNames,\r\n  };\r\n}\r\n\r\n//\r\n// some components\r\n//\r\n\r\nfunction SmallBucketTile({ label, active, onClick, children }) {\r\n  return (\r\n    <div\r\n      className={classNames(\"bucket-and-label\", {\r\n        \"cur-obj\": !active,\r\n      })}\r\n      onClick={onClick}\r\n      title={label}\r\n    >\r\n      <span>{label}</span>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MainBucket({ levelInterp }) {\r\n  const { curObjectiveName, goal } = useContext(AppContext);\r\n  return (\r\n    <div className=\"bucket-viz\">\r\n      <div className=\"bucket-viz-container\">\r\n        <span className=\"main-bucket-label\">{curObjectiveName}</span>\r\n        <BucketGlyph levelInterp={levelInterp} width={200} height={200} />\r\n        <div\r\n          className=\"bucket-razor\"\r\n          style={{\r\n            top:\r\n              d3.scaleLinear().domain([0, MAX_DELIVS]).range([200, 0])(goal) +\r\n              \"px\",\r\n          }}\r\n        >\r\n          <p>Goal</p>\r\n          <p>\r\n            {d3.format(\".0f\")(goal)} <span>TAF</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Overlay({\r\n  sortMode,\r\n  setSortMode,\r\n  setCurScenName,\r\n  setCurScenNamePreview,\r\n  exitFn,\r\n}) {\r\n  const {\r\n    data,\r\n    curObjectiveName,\r\n    curScenName,\r\n    curScenNamePreview,\r\n    curOrderedScenNames,\r\n    goal,\r\n  } = useContext(AppContext);\r\n\r\n  const curPercentileScens = useMemo(() => {\r\n    return Array.from(curOrderedScenNames).reverse();\r\n  }, [curOrderedScenNames]);\r\n\r\n  const asdf = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    // console.log(asdf.current);\r\n    asdf.current.scrollTo(\r\n      0,\r\n      asdf.current.querySelector(`#${curScenName}`).getBoundingClientRect()\r\n        .top - 100\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div className={\"ridgeline-overlay\"}>\r\n      <div className=\"ridgeline-overlay-container\">\r\n        <button className=\"overlay-exit-btn\" onClick={exitFn}>\r\n          ×\r\n        </button>\r\n        <div className=\"sort-types\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"sort-type\"\r\n            value=\"median\"\r\n            id=\"median\"\r\n            checked={sortMode === \"median\"}\r\n            onChange={() => void setSortMode(\"median\")}\r\n          />\r\n          <label htmlFor=\"median\">Median</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"sort-type\"\r\n            value=\"deliveries\"\r\n            id=\"deliveries\"\r\n            checked={sortMode === \"deliveries\"}\r\n            onChange={() => void setSortMode(\"deliveries\")}\r\n          />\r\n          <label htmlFor=\"deliveries\">Max. Deliveries</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"sort-type\"\r\n            value=\"alphabetical\"\r\n            id=\"alphabetical\"\r\n            checked={sortMode === \"alphabetical\"}\r\n            onChange={() => void setSortMode(\"alphabetical\")}\r\n          />\r\n          <label htmlFor=\"alphabetical\">Alphabetical</label>\r\n        </div>\r\n        <div\r\n          className=\"overlay-container\"\r\n          onMouseLeave={() => setCurScenNamePreview(null)}\r\n          ref={asdf}\r\n        >\r\n          <div\r\n            className={classNames(\"overlay-container-2\", {\r\n              previewing: curScenNamePreview !== null,\r\n            })}\r\n          >\r\n            <AnimateList keyList={curPercentileScens}>\r\n              {curPercentileScens.map((scenID) => (\r\n                <div\r\n                  key={scenID}\r\n                  className={classNames({\r\n                    previewing: scenID === curScenNamePreview,\r\n                    \"current-scene\": scenID === curScenName,\r\n                  })}\r\n                  id={scenID}\r\n                  onMouseEnter={() => setCurScenNamePreview(scenID)}\r\n                  onClick={() => {\r\n                    setCurScenName(scenID);\r\n                  }}\r\n                >\r\n                  <DotHistogramSmall\r\n                    data={\r\n                      data[curObjectiveName][SCENARIO_KEY_STRING][scenID][\r\n                        DELIV_KEY_STRING\r\n                      ]\r\n                    }\r\n                    goal={goal}\r\n                    width={300}\r\n                    height={200}\r\n                  />\r\n                  <span>{scenID}</span>\r\n                </div>\r\n              ))}\r\n            </AnimateList>\r\n            <div\r\n              className=\"dot-overlay-razor\"\r\n              style={{\r\n                left:\r\n                  d3.scaleLinear().domain([0, MAX_DELIVS]).range([0, 300])(\r\n                    goal\r\n                  ) + \"px\",\r\n              }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AnimateList({ keyList, children }) {\r\n  const currBBoxes = useRef({});\r\n\r\n  const prevBBoxes = useRef({});\r\n  const domRefs = useRef({});\r\n\r\n  useLayoutEffect(() => {\r\n    prevBBoxes.current = {};\r\n\r\n    for (const k in currBBoxes.current) {\r\n      prevBBoxes.current[k] = currBBoxes.current[k];\r\n    }\r\n\r\n    currBBoxes.current = {};\r\n\r\n    for (const k in domRefs.current) {\r\n      currBBoxes.current[k] =\r\n        domRefs.current[k].getBoundingClientRect().top +\r\n        domRefs.current[k].parentNode.scrollTop;\r\n    }\r\n\r\n    const hasPrevBoundingBox = Object.keys(prevBBoxes.current).length;\r\n\r\n    if (hasPrevBoundingBox) {\r\n      React.Children.forEach(children, (child) => {\r\n        const firstBox = currBBoxes.current[child.key];\r\n        const lastBox = prevBBoxes.current[child.key];\r\n\r\n        if (lastBox === undefined || firstBox === undefined) return;\r\n        const changeInX = firstBox - lastBox;\r\n\r\n        if (changeInX) {\r\n          requestAnimationFrame(() => {\r\n            domRefs.current[\r\n              child.key\r\n            ].style.transform = `translateY(${-changeInX}px)`;\r\n            domRefs.current[child.key].style.transition = \"transform 0s\";\r\n\r\n            requestAnimationFrame(() => {\r\n              domRefs.current[child.key].style.transform = \"\";\r\n              domRefs.current[child.key].style.transition = \"transform 500ms\";\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [keyList]);\r\n\r\n  domRefs.current = {};\r\n\r\n  return React.Children.map(children, (child) => {\r\n    return React.cloneElement(child, {\r\n      ref: (el) => {\r\n        if (el) {\r\n          domRefs.current[child.key] = el;\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\n//\r\n// some util functions\r\n//\r\n\r\nfunction createInterps(data, objectives, scenID) {\r\n  const mapFunc = {};\r\n  objectives.forEach((name) => {\r\n    const delivs = data[name][SCENARIO_KEY_STRING][scenID][DELIV_KEY_STRING];\r\n    mapFunc[name] = d3\r\n      .scaleLinear()\r\n      .domain(ticksExact(0, 1, delivs.length))\r\n      .range(delivs.map((v) => Math.min(1, v / MAX_DELIVS) || 0))\r\n      .clamp(true);\r\n  });\r\n  return mapFunc;\r\n}\r\n"],"names":["DEFAULT_GOAL","DEFAULT_OBJECTIVE_NAME","DEFAULT_SCEN_NAME","DEFAULT_SORT_MODE","AppContext","createContext","MainApp","_ref","data","objectivesData","current","objectiveNames","useRef","Object","keys","goal","showScens","sortMode","curObjectiveName","curScenName","curScenNamePreview","setGoal","setShowScens","setSortMode","setCurObjectiveName","setCurScenName","setCurScenNamePreview","useInterface","curDelivInterps","curOrderedScenNames","useCaches","curMainInterp","useMemo","curScenNameDisplayed","_jsxs","Provider","value","children","className","_jsx","onClick","Math","max","indexOf","s","min","length","MainBucket","levelInterp","DotHistogram","SCENARIO_KEY_STRING","DELIV_KEY_STRING","map","objectiveName","SmallBucketTile","label","active","BucketGlyph","width","height","Overlay","exitFn","useState","criteriaSort","createInterps","_ref2","classNames","title","_ref3","useContext","style","top","d3","domain","MAX_DELIVS","range","_ref4","curPercentileScens","Array","from","reverse","asdf","useLayoutEffect","scrollTo","querySelector","concat","getBoundingClientRect","type","name","id","checked","onChange","htmlFor","onMouseLeave","ref","previewing","AnimateList","keyList","scenID","onMouseEnter","DotHistogramSmall","left","_ref5","currBBoxes","prevBBoxes","domRefs","k","parentNode","scrollTop","React","forEach","child","firstBox","key","lastBox","undefined","changeInX","requestAnimationFrame","transform","transition","el","objectives","mapFunc","delivs","ticksExact","v","clamp"],"sourceRoot":""}