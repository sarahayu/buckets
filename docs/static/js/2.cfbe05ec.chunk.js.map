{"version":3,"file":"static/js/2.cfbe05ec.chunk.js","mappings":"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","sources":["RecursiveDropletsBasicApp.jsx","RecursiveDropletsWatercolorApp.jsx","bucket-lib/utils.js","data/objectivesData.jsx","utils.js"],"sourcesContent":["import * as d3 from \"d3\";\r\nimport React, { useLayoutEffect, useMemo, useRef, useState } from \"react\";\r\nimport { interpolateWatercolorBlue, ticksExact } from \"./bucket-lib/utils\";\r\nimport { MAX_DELIVS, objectivesData } from \"./data/objectivesData\";\r\nimport {\r\n  DROPLET_SHAPE,\r\n  createInterps,\r\n  criteriaSort,\r\n  percentToRatioFilled,\r\n  placeDropsUsingPhysics,\r\n} from \"./utils\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\nconst LEVELS = 5;\r\nconst DEFAULT_OBJECTIVE_IDX = 2;\r\nconst RAD_PX = 7;\r\nconst MIN_LEV_VAL = 0.1;\r\nconst DROPLET_PAD_FACTOR = 2.5;\r\nconst PX_BIAS = 1;\r\n\r\nexport default function RecursiveDropletsBasicApp({ watercolor = false }) {\r\n  const { current: objectiveIDs } = useRef(Object.keys(objectivesData));\r\n  const winDim = useRef();\r\n  const [curObjectiveIdx, setCurObjectiveIdx] = useState(DEFAULT_OBJECTIVE_IDX);\r\n  const [normalize, setNormalize] = useState(false);\r\n  const [searchParams] = useSearchParams();\r\n\r\n  const bucketSvgSelector = useRef();\r\n\r\n  const orderedScenIDs = useMemo(\r\n    () =>\r\n      criteriaSort(\r\n        \"median\",\r\n        objectivesData,\r\n        objectiveIDs[curObjectiveIdx]\r\n      ).reverse(),\r\n    [curObjectiveIdx]\r\n  );\r\n\r\n  const waterLevels = useMemo(\r\n    () =>\r\n      orderedScenIDs.map((s) => {\r\n        const i = createInterps(\r\n          objectiveIDs[curObjectiveIdx],\r\n          s,\r\n          objectivesData,\r\n          MAX_DELIVS\r\n        );\r\n        return ticksExact(0, 1, LEVELS + 1).map((d, j) => i(d));\r\n      }),\r\n    [curObjectiveIdx]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    winDim.current = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    };\r\n\r\n    bucketSvgSelector.current\r\n      .attr(\"width\", winDim.current.width)\r\n      .attr(\"height\", winDim.current.height);\r\n\r\n    if (\r\n      searchParams.get(\"obj\") &&\r\n      objectiveIDs.includes(searchParams.get(\"obj\"))\r\n    ) {\r\n      setCurObjectiveIdx(objectiveIDs.indexOf(searchParams.get(\"obj\")));\r\n      setNormalize(searchParams.get(\"norm\") == \"true\");\r\n    }\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    const width = winDim.current.width,\r\n      height = winDim.current.height;\r\n\r\n    const scale = 1;\r\n\r\n    const nodes_pos = placeDropsUsingPhysics(\r\n      width / 2,\r\n      height / 2,\r\n      waterLevels.map((levs, idx) => ({\r\n        r:\r\n          (normalize ? 1 : Math.max(levs[0], MIN_LEV_VAL)) *\r\n          scale *\r\n          RAD_PX *\r\n          DROPLET_PAD_FACTOR,\r\n        id: idx,\r\n      }))\r\n    );\r\n\r\n    const nodes = nodes_pos.map(({ id: idx, x, y }) => ({\r\n      levs: waterLevels[idx].map(\r\n        (w, i) =>\r\n          Math.max(w, i == 0 ? MIN_LEV_VAL : 0) *\r\n          scale *\r\n          (normalize ? 1 / Math.max(waterLevels[idx][0], MIN_LEV_VAL) : 1) *\r\n          RAD_PX\r\n      ),\r\n      maxLev:\r\n        (normalize ? 1 : Math.max(waterLevels[idx][0], MIN_LEV_VAL) * scale) *\r\n        RAD_PX,\r\n      tilt: Math.random() * 50 - 25,\r\n      dur: Math.random() * 100 + 400,\r\n      startX: x,\r\n      startY: y - RAD_PX * 4 * Math.random(),\r\n      endX: x,\r\n      endY: y,\r\n    }));\r\n\r\n    bucketSvgSelector.current\r\n      .selectAll(\".smallDrop\")\r\n      .data(nodes, (_, i) => i)\r\n      .join((enter) => {\r\n        return enter\r\n          .append(\"g\")\r\n          .attr(\"class\", \"smallDrop\")\r\n          .each(function ({ levs }, i) {\r\n            d3.select(this)\r\n              .append(\"defs\")\r\n              .append(\"clipPath\")\r\n              .attr(\"id\", \"drop-mask-\" + i)\r\n              .append(\"path\")\r\n              .attr(\"d\", DROPLET_SHAPE);\r\n            d3.select(this)\r\n              .append(\"g\")\r\n              .attr(\"clip-path\", `url(#drop-mask-${i})`)\r\n              .selectAll(\"rect\")\r\n              .data(levs, (_, i) => i)\r\n              .join(\"rect\")\r\n              .attr(\"fill\", (_, i) => interpolateWatercolorBlue(i / LEVELS));\r\n          });\r\n      })\r\n      .attr(\r\n        \"transform\",\r\n        ({ startX, startY, tilt }) =>\r\n          `translate(${startX}, ${startY}) rotate(${tilt})`\r\n      )\r\n      .style(\"opacity\", 0)\r\n      .each(function ({ levs, maxLev }) {\r\n        d3.select(this)\r\n          .selectAll(\"rect\")\r\n          .data(levs, (_, i) => i)\r\n          .attr(\"width\", maxLev * 2)\r\n          .attr(\"height\", maxLev * 2)\r\n          .attr(\"x\", -maxLev)\r\n          .attr(\r\n            \"y\",\r\n            (l) =>\r\n              maxLev * Math.SQRT1_2 -\r\n              percentToRatioFilled(l / maxLev) * (maxLev * (1 + Math.SQRT1_2)) +\r\n              (l === 0 ? PX_BIAS : 0)\r\n          );\r\n        d3.select(this).select(\"path\").attr(\"transform\", `scale(${maxLev})`);\r\n      })\r\n      .call((s) => {\r\n        s.transition()\r\n          .duration(({ dur }) => dur)\r\n          .ease(d3.easeLinear)\r\n          .attr(\r\n            \"transform\",\r\n            ({ endX, endY, tilt }) =>\r\n              `translate(${endX}, ${endY}) rotate(${tilt})`\r\n          )\r\n          .style(\"opacity\", 1);\r\n      });\r\n  }, [waterLevels, normalize]);\r\n\r\n  return (\r\n    <div className=\"bubbles-wrapper\">\r\n      <div className=\"bubbles-input-area\">\r\n        <select\r\n          value={curObjectiveIdx}\r\n          onChange={(e) => setCurObjectiveIdx(parseInt(e.target.value))}\r\n        >\r\n          {objectiveIDs.map((objectiveID, i) => (\r\n            <option name={i} value={i} key={i}>\r\n              {objectiveID}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"norm\"\r\n          checked={normalize}\r\n          onChange={() => void setNormalize((e) => !e)}\r\n        />\r\n        <label htmlFor=\"norm\">normalize</label>\r\n      </div>\r\n      <div className={\"bubbles-svg-wrapper\" + (watercolor ? \"-painter\" : \"\")}>\r\n        <svg\r\n          className={\"bubbles-svg\" + (watercolor ? \"-painter\" : \"\")}\r\n          ref={(e) => void (bucketSvgSelector.current = d3.select(e))}\r\n        ></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import RecursiveDropletsBasicApp from \"./RecursiveDropletsBasicApp\";\r\n\r\nexport default function RecusiveDropletsWatercolorApp() {\r\n  return <RecursiveDropletsBasicApp watercolor />;\r\n}\r\n","import * as d3 from \"d3\";\r\nimport { useRef } from \"react\";\r\n\r\n// inclusive\r\nexport function ticksExact(start, stop, count) {\r\n  return d3.range(count).map((i) => (i / (count - 1)) * (stop - start) + start);\r\n}\r\n\r\nexport function bucketPath(width, height, filled = 1.0, taper = 0.8) {\r\n  let bottomRight = width * taper + (width * (1 - taper)) / 2,\r\n    bottomLeft = (width * (1 - taper)) / 2;\r\n  let data = [\r\n    {\r\n      x: d3.interpolate(bottomRight, width)(filled),\r\n      y: d3.interpolate(height, 0)(filled),\r\n    },\r\n    { x: bottomRight, y: height },\r\n    { x: bottomLeft, y: height },\r\n    {\r\n      x: d3.interpolate(bottomLeft, 0)(filled),\r\n      y: d3.interpolate(height, 0)(filled),\r\n    },\r\n  ];\r\n  let lineFunc = d3\r\n    .line()\r\n    .x(function (d) {\r\n      return d.x;\r\n    })\r\n    .y(function (d) {\r\n      return d.y;\r\n    });\r\n  return lineFunc(data) + \"z\";\r\n}\r\n\r\nexport function quantileBins(numericBins, unitsPerQuantile, maxQuantiles) {\r\n  let quantileBins = numericBins.map((bin) =>\r\n    Math.round(bin.length / unitsPerQuantile)\r\n  );\r\n  let sum = d3.sum(quantileBins);\r\n\r\n  while (sum > maxQuantiles) {\r\n    quantileBins[\r\n      d3.minIndex(numericBins, (d, i) =>\r\n        d.length !== 0\r\n          ? d.length / unitsPerQuantile - quantileBins[i]\r\n          : Infinity\r\n      )\r\n    ] -= 1;\r\n\r\n    sum = d3.sum(quantileBins);\r\n  }\r\n\r\n  while (sum < maxQuantiles) {\r\n    quantileBins[\r\n      d3.maxIndex(numericBins, (d, i) =>\r\n        d.length !== 0\r\n          ? d.length / unitsPerQuantile - quantileBins[i]\r\n          : -Infinity\r\n      )\r\n    ] += 1;\r\n\r\n    sum = d3.sum(quantileBins);\r\n  }\r\n\r\n  return quantileBins;\r\n}\r\n\r\n// https://www.developerway.com/posts/implementing-advanced-use-previous-hook\r\nexport function usePrevious(value, isEqualFunc) {\r\n  // initialise the ref with previous and current values\r\n  const ref = useRef({\r\n    value: value,\r\n    prev: null,\r\n  });\r\n\r\n  const current = ref.current.value;\r\n\r\n  // if the value passed into hook doesn't match what we store as \"current\"\r\n  // move the \"current\" to the \"previous\"\r\n  // and store the passed value as \"current\"\r\n  if (isEqualFunc ? !isEqualFunc(value, current) : value !== current) {\r\n    ref.current = {\r\n      value: value,\r\n      prev: current,\r\n    };\r\n  }\r\n\r\n  // return the previous value only\r\n  return ref.current.prev;\r\n}\r\n\r\nexport const interpolateWatercolorBlue = (i) =>\r\n  d3.interpolateBlues(d3.scaleLinear([0.2, 1.0])(i));\r\n","import { mapBy } from \"../utils\";\r\n\r\nexport const MAX_DELIVS = 1200;\r\nexport const SCENARIO_KEY_STRING = \"scens\";\r\nexport const DELIV_KEY_STRING = \"delivs\";\r\n\r\nexport const objectivesData = await (async function () {\r\n  const objs = await (await fetch(\"./all_objectives.json\")).json();\r\n\r\n  for (const obj of objs) {\r\n    obj[SCENARIO_KEY_STRING] = obj[SCENARIO_KEY_STRING];\r\n    for (const scen of obj[SCENARIO_KEY_STRING]) {\r\n      scen[DELIV_KEY_STRING] = scen[DELIV_KEY_STRING].map((v) =>\r\n        Math.min(Math.max(0, v), MAX_DELIVS)\r\n      ).sort((a, b) => b - a);\r\n    }\r\n    obj[SCENARIO_KEY_STRING] = mapBy(\r\n      obj[SCENARIO_KEY_STRING],\r\n      ({ name }) => name\r\n    );\r\n  }\r\n\r\n  console.log(\"DATA: loading objectives data\");\r\n\r\n  return mapBy(objs, ({ obj }) => obj);\r\n})();\r\n","import * as d3 from \"d3\";\r\nimport Matter from \"matter-js\";\r\nimport { useCallback, useMemo, useState } from \"react\";\r\nimport { DELIV_KEY_STRING, SCENARIO_KEY_STRING } from \"./data/objectivesData\";\r\nimport { ticksExact } from \"./bucket-lib/utils\";\r\n\r\n// when fn is `({ name }) => name`, turns\r\n//\r\n//  [\r\n//    { name: \"Zeta\", age: 30 },\r\n//    { name: \"Aloy\", age: 40 },\r\n//  ];\r\n//\r\n// to\r\n//\r\n//  {\r\n//    \"Zeta\": { name: \"Zeta\", age: 30 },\r\n//    \"Aloy\": { name: \"Aloy\", age: 40 },\r\n//  };\r\nexport function mapBy(objs, fn) {\r\n  const newObjs = Object.groupBy(objs, fn);\r\n\r\n  for (const key of Object.keys(newObjs)) {\r\n    newObjs[key] = newObjs[key][0];\r\n  }\r\n\r\n  return newObjs;\r\n}\r\n\r\n// size is height of waterdrop plus a bit more (1/2 of size is distance from top of drop to center of circle part)\r\nexport const WATERDROP_ICON = {\r\n  draw: function (context, size) {\r\n    context.moveTo(0, -size / 2);\r\n    context.lineTo(size / 4, -size / 4);\r\n\r\n    context.arc(0, 0, size / Math.SQRT2 / 2, -Math.PI / 4, (Math.PI * 5) / 4);\r\n    context.lineTo(0, -size / 2);\r\n    context.closePath();\r\n  },\r\n};\r\n\r\n// path generated when WATERDROP_ICON size = 2\r\nexport const DROPLET_SHAPE = \"M0,-1L0.5,-0.5A0.707,0.707,0,1,1,-0.5,-0.5L0,-1Z\";\r\n\r\nexport function percentToRatioFilled(p) {\r\n  p -= 0.0088;\r\n  return Math.min(\r\n    1,\r\n    Math.max(\r\n      0,\r\n      (3.1304 * p ** 3 - 4.2384 * p ** 2 + 3.3471 * p + 0.0298) / 2.2326\r\n    )\r\n  );\r\n}\r\n\r\nexport function kernelDensityEstimator(kernel, X) {\r\n  return function (V) {\r\n    return X.map(function (x) {\r\n      return [\r\n        x,\r\n        d3.mean(V, function (v) {\r\n          return kernel(x - v);\r\n        }),\r\n      ];\r\n    });\r\n  };\r\n}\r\n\r\nexport function kernelEpanechnikov(k) {\r\n  return function (v) {\r\n    return Math.abs((v /= k)) <= 1 ? (0.75 * (1 - v * v)) / k : 0;\r\n  };\r\n}\r\n\r\nfunction generateWaterdrop(width) {\r\n  const rad = width / 2;\r\n  const partitions = 16;\r\n  const delta = (Math.PI * 3) / 2 / partitions;\r\n\r\n  const outer = [\r\n    {\r\n      x: Math.cos((Math.PI * 5) / 4) * rad,\r\n      y: Math.sin((Math.PI * 5) / 4) * rad,\r\n    },\r\n    {\r\n      x: 0,\r\n      y: -Math.SQRT2 * rad,\r\n    },\r\n  ];\r\n\r\n  for (let i = 0; i <= partitions; i++) {\r\n    outer.push({\r\n      x: Math.cos(i * delta - Math.PI / 4) * rad,\r\n      y: Math.sin(i * delta - Math.PI / 4) * rad,\r\n    });\r\n  }\r\n\r\n  return outer;\r\n}\r\n\r\nexport function generateRandoPoints(shape, count) {\r\n  const bounds = Matter.Bounds.create(shape);\r\n\r\n  const minX = bounds.min.x,\r\n    maxX = bounds.max.x,\r\n    minY = bounds.min.y,\r\n    maxY = bounds.max.y;\r\n\r\n  const genX = d3.scaleLinear([minX, maxX]);\r\n  const genY = d3.scaleLinear([minY, maxY]);\r\n\r\n  const points = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    while (true) {\r\n      const x = genX(Math.random());\r\n      const y = genY(Math.random());\r\n\r\n      if (Matter.Vertices.contains(shape, { x, y })) {\r\n        points.push([x, y]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return points;\r\n}\r\n\r\n// inner diameter of 1\r\nexport const WATERDROP_CAGE_COORDS = (function () {\r\n  const outer = generateWaterdrop(3);\r\n  const inner = generateWaterdrop(1);\r\n\r\n  const coords = [];\r\n\r\n  for (let i = 0; i < outer.length - 2; i++) {\r\n    coords.push([\r\n      outer[i],\r\n      outer[i + (i < 2 ? 1 : 2)],\r\n      inner[i + (i < 2 ? 1 : 2)],\r\n      inner[i],\r\n    ]);\r\n  }\r\n\r\n  return coords;\r\n})();\r\n\r\nlet RANDO_CACHE;\r\nlet lastNodesLen;\r\n\r\n// assuming nodes is already ordered and first nodes are going to be put on the bottom\r\nexport function placeDropsUsingPhysics(x, y, nodes) {\r\n  // first generate random points within water droplet. we can stop here, but points might not be the most uniformly distributed\r\n\r\n  if (!RANDO_CACHE || nodes.length !== lastNodesLen)\r\n    RANDO_CACHE = d3\r\n      .range(4)\r\n      .map(() =>\r\n        generateRandoPoints(generateWaterdrop(1), (lastNodesLen = nodes.length))\r\n      );\r\n\r\n  const AREA = d3.sum(nodes.map(({ r }) => r ** 2 * 3.14));\r\n  const WIDTH_AREA = Math.floor((Math.sqrt(AREA / 3.14) * 2) / 2);\r\n\r\n  const randoPoints = RANDO_CACHE[\r\n    Math.floor(Math.random() * RANDO_CACHE.length)\r\n  ].map(([x, y]) => [x * WIDTH_AREA, y * WIDTH_AREA]);\r\n\r\n  // thus, we use physics engine to take care of distributing the points evenly and based on radius\r\n  const Engine = Matter.Engine,\r\n    Bodies = Matter.Bodies,\r\n    Composite = Matter.Composite;\r\n\r\n  const engine = Engine.create();\r\n\r\n  const nodePos = randoPoints.sort((a, b) => b[1] - a[1]);\r\n\r\n  const node_bodies = nodes.map(({ r, id }, i) => {\r\n    const [nx, ny] = nodePos[i];\r\n    return Bodies.circle(nx, ny, r, {\r\n      restitution: 0,\r\n      id: id,\r\n    });\r\n  });\r\n\r\n  const parts = WATERDROP_CAGE_COORDS.map((quad) =>\r\n    Matter.Body.create({\r\n      position: Matter.Vertices.centre(quad),\r\n      vertices: quad,\r\n      isStatic: true,\r\n    })\r\n  );\r\n\r\n  const cage = Matter.Body.create({\r\n    isStatic: true,\r\n  });\r\n\r\n  Matter.Body.setParts(cage, parts);\r\n\r\n  Matter.Body.setCentre(cage, { x: 0, y: 0 });\r\n  Matter.Body.scale(cage, WIDTH_AREA * 1.1, WIDTH_AREA * 1.1);\r\n\r\n  Composite.add(engine.world, [...node_bodies, cage]);\r\n\r\n  // run engine for SECS second at FPS fps\r\n  for (let i = 0, FPS = 60, SECS = 0.3; i < FPS * SECS; i++)\r\n    Engine.update(engine, 1000 / FPS);\r\n\r\n  return node_bodies.map(({ position, id }) => ({\r\n    id,\r\n    x: position.x + x,\r\n    y: position.y + y + WIDTH_AREA * 0.1,\r\n  }));\r\n}\r\n\r\n// https://gist.github.com/mbostock/5743979\r\nexport function bounce(h) {\r\n  if (!arguments.length) h = 0.25;\r\n  var b0 = 1 - h,\r\n    b1 = b0 * (1 - b0) + b0,\r\n    b2 = b0 * (1 - b1) + b1,\r\n    x0 = 2 * Math.sqrt(h),\r\n    x1 = x0 * Math.sqrt(h),\r\n    x2 = x1 * Math.sqrt(h),\r\n    t0 = 1 / (1 + x0 + x1 + x2),\r\n    t1 = t0 + t0 * x0,\r\n    t2 = t1 + t0 * x1,\r\n    m0 = t0 + (t0 * x0) / 2,\r\n    m1 = t1 + (t0 * x1) / 2,\r\n    m2 = t2 + (t0 * x2) / 2,\r\n    a = 1 / (t0 * t0);\r\n  return function (t) {\r\n    return t >= 1\r\n      ? 1\r\n      : t < t0\r\n      ? a * t * t\r\n      : t < t1\r\n      ? a * (t -= m0) * t + b0\r\n      : t < t2\r\n      ? a * (t -= m1) * t + b1\r\n      : a * (t -= m2) * t + b2;\r\n  };\r\n}\r\n\r\nexport function rangeInclusive(a, b) {\r\n  return d3.range(a, b + 1);\r\n}\r\n\r\nexport function useStickyScale(defaultVal, scale) {\r\n  const [val, setVal] = useState(defaultVal);\r\n\r\n  const valActual = useMemo(() => scale(val), [val]);\r\n  const setValActual = useCallback((v) => void setVal(scale(v)), []);\r\n\r\n  return [valActual, setValActual];\r\n}\r\n\r\nexport function createInterps(name, curScen, data, maxDelivs) {\r\n  const delivs = data[name][SCENARIO_KEY_STRING][curScen][DELIV_KEY_STRING];\r\n  return d3\r\n    .scaleLinear()\r\n    .domain(ticksExact(0, 1, delivs.length))\r\n    .range(delivs.map((v) => Math.min(1, v / maxDelivs) || 0))\r\n    .clamp(true);\r\n}\r\n\r\nexport function criteriaSort(criteria, data, objective) {\r\n  if (criteria === \"median\") {\r\n    return Object.keys(data[objective][SCENARIO_KEY_STRING]).sort(\r\n      (a, b) =>\r\n        d3.mean(data[objective][SCENARIO_KEY_STRING][a][DELIV_KEY_STRING]) -\r\n        d3.mean(data[objective][SCENARIO_KEY_STRING][b][DELIV_KEY_STRING])\r\n    );\r\n  }\r\n  if (criteria === \"deliveries\") {\r\n    return Object.keys(data[objective][SCENARIO_KEY_STRING]).sort(\r\n      (a, b) =>\r\n        d3.max(data[objective][SCENARIO_KEY_STRING][a][DELIV_KEY_STRING]) -\r\n        d3.max(data[objective][SCENARIO_KEY_STRING][b][DELIV_KEY_STRING])\r\n    );\r\n  }\r\n  if (criteria === \"alphabetical\") {\r\n    return Object.keys(data[objective][SCENARIO_KEY_STRING]).sort();\r\n  }\r\n}\r\n"],"names":["LEVELS","DEFAULT_OBJECTIVE_IDX","RAD_PX","MIN_LEV_VAL","DROPLET_PAD_FACTOR","PX_BIAS","RecursiveDropletsBasicApp","_ref","watercolor","current","objectiveIDs","useRef","Object","keys","objectivesData","winDim","curObjectiveIdx","setCurObjectiveIdx","useState","normalize","setNormalize","searchParams","useSearchParams","bucketSvgSelector","orderedScenIDs","useMemo","criteriaSort","reverse","waterLevels","map","s","i","createInterps","MAX_DELIVS","ticksExact","d","j","useLayoutEffect","width","window","innerWidth","height","innerHeight","attr","get","includes","indexOf","nodes","placeDropsUsingPhysics","levs","idx","r","Math","max","id","_ref2","x","y","w","maxLev","tilt","random","dur","startX","startY","endX","endY","selectAll","data","_","join","enter","append","each","_ref3","d3","this","DROPLET_SHAPE","concat","interpolateWatercolorBlue","_ref4","style","_ref5","l","SQRT1_2","percentToRatioFilled","select","call","transition","duration","_ref6","ease","_ref7","_jsxs","className","children","_jsx","value","onChange","e","parseInt","target","objectiveID","name","type","checked","htmlFor","ref","RecusiveDropletsWatercolorApp","start","stop","count","bucketPath","filled","arguments","length","undefined","taper","bottomRight","bottomLeft","lineFunc","quantileBins","numericBins","unitsPerQuantile","maxQuantiles","bin","round","sum","Infinity","usePrevious","isEqualFunc","prev","SCENARIO_KEY_STRING","DELIV_KEY_STRING","async","objs","fetch","json","obj","scen","v","min","sort","a","b","mapBy","console","log","fn","newObjs","groupBy","key","WATERDROP_ICON","draw","context","size","moveTo","lineTo","arc","SQRT2","PI","closePath","p","kernelDensityEstimator","kernel","X","V","kernelEpanechnikov","k","abs","generateWaterdrop","rad","delta","outer","cos","sin","push","generateRandoPoints","shape","bounds","Matter","create","minX","maxX","minY","maxY","genX","genY","points","contains","WATERDROP_CAGE_COORDS","inner","coords","RANDO_CACHE","lastNodesLen","AREA","WIDTH_AREA","floor","sqrt","randoPoints","Engine","Bodies","Composite","engine","nodePos","node_bodies","nx","ny","circle","restitution","parts","quad","position","centre","vertices","isStatic","cage","setParts","setCentre","scale","add","world","FPS","SECS","update","useStickyScale","defaultVal","val","setVal","useCallback","curScen","maxDelivs","delivs","domain","range","clamp","criteria","objective"],"sourceRoot":""}