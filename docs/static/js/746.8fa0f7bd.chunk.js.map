{"version":3,"file":"static/js/746.8fa0f7bd.chunk.js","mappings":"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","sources":["RecursiveDropletsBasicApp.jsx","bucket-lib/utils.js","data/objectivesData.jsx","utils.js"],"sourcesContent":["import * as d3 from \"d3\";\r\nimport React, { useLayoutEffect, useMemo, useRef, useState } from \"react\";\r\nimport { interpolateWatercolorBlue, ticksExact } from \"./bucket-lib/utils\";\r\nimport { MAX_DELIVS, objectivesData } from \"./data/objectivesData\";\r\nimport {\r\n  createInterps,\r\n  criteriaSort,\r\n  percentToRatioFilled,\r\n  placeDropsUsingPhysics,\r\n} from \"./utils\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\nconst LEVELS = 5;\r\nconst DEFAULT_OBJECTIVE_IDX = 2;\r\nconst RAD_PX = 7;\r\nconst DROPLET_SHAPE = \"M0,-10L5,-5A7.071,7.071,0,1,1,-5,-5L0,-10Z\";\r\nconst SVG_DROPLET_WIDTH_DONT_CHANGE = 4;\r\n\r\nexport default function RecursiveDropletsBasicApp({ watercolor = false }) {\r\n  const { current: objectiveIDs } = useRef(Object.keys(objectivesData));\r\n  const winDim = useRef();\r\n  const [curObjectiveIdx, setCurObjectiveIdx] = useState(DEFAULT_OBJECTIVE_IDX);\r\n  const [normalize, setNormalize] = useState(false);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const bucketSvgSelector = useRef();\r\n\r\n  const orderedScenIDs = useMemo(\r\n    () =>\r\n      criteriaSort(\r\n        \"median\",\r\n        objectivesData,\r\n        objectiveIDs[curObjectiveIdx]\r\n      ).reverse(),\r\n    [curObjectiveIdx]\r\n  );\r\n\r\n  const waterLevels = useMemo(\r\n    () =>\r\n      orderedScenIDs.map((s) => {\r\n        const i = createInterps(\r\n          objectiveIDs[curObjectiveIdx],\r\n          s,\r\n          objectivesData,\r\n          MAX_DELIVS\r\n        );\r\n        return ticksExact(0, 1, LEVELS + 1).map((d, j) => i(d));\r\n      }),\r\n    [curObjectiveIdx]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    winDim.current = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    };\r\n\r\n    bucketSvgSelector.current\r\n      .attr(\"width\", window.innerWidth)\r\n      .attr(\"height\", window.innerHeight);\r\n\r\n    if (\r\n      searchParams.get(\"obj\") &&\r\n      objectiveIDs.includes(searchParams.get(\"obj\"))\r\n    ) {\r\n      setCurObjectiveIdx(objectiveIDs.indexOf(searchParams.get(\"obj\")));\r\n      setNormalize(searchParams.get(\"norm\") == \"true\");\r\n    }\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    const width = winDim.current.width,\r\n      height = winDim.current.height;\r\n\r\n    const scale = 1;\r\n\r\n    const nodes_pos = placeDropsUsingPhysics(\r\n      width / 2,\r\n      height / 2,\r\n      waterLevels.map((levs, idx) => ({\r\n        r: (normalize ? 1 : levs[0]) * scale * RAD_PX * 2.5,\r\n        id: idx,\r\n      }))\r\n    );\r\n\r\n    const nodes = nodes_pos.map(({ id: idx, x, y }) => ({\r\n      levs: waterLevels[idx].map(\r\n        (w) => w * scale * (normalize ? 1 / waterLevels[idx][0] : 1)\r\n      ),\r\n      maxLev: normalize ? 1 : Math.max(waterLevels[idx][0], 0.1) * scale,\r\n      tilt: Math.random() * 50 - 25,\r\n      dur: Math.random() * 100 + 400,\r\n      startX: x,\r\n      startY: y - RAD_PX * 4 * Math.random(),\r\n      endX: x,\r\n      endY: y,\r\n    }));\r\n\r\n    bucketSvgSelector.current\r\n      .selectAll(\".smallDrop\")\r\n      .data(nodes, (_, i) => i)\r\n      .join((enter) => {\r\n        return enter\r\n          .append(\"g\")\r\n          .attr(\"class\", \"smallDrop\")\r\n          .each(function ({ levs, maxLev }, i) {\r\n            d3.select(this)\r\n              .append(\"defs\")\r\n              .append(\"clipPath\")\r\n              .attr(\"id\", \"drop-mask-\" + i)\r\n              .append(\"path\")\r\n              .attr(\"d\", DROPLET_SHAPE);\r\n            d3.select(this)\r\n              .append(\"g\")\r\n              .attr(\"clip-path\", `url(#drop-mask-${i})`)\r\n              .selectAll(\"rect\")\r\n              .data(levs, (_, i) => i)\r\n              .join(\"rect\")\r\n              .attr(\"fill\", (_, i) => interpolateWatercolorBlue(i / LEVELS));\r\n          });\r\n      })\r\n      .attr(\r\n        \"transform\",\r\n        ({ startX, startY, tilt }) =>\r\n          `translate(${startX}, ${startY}) rotate(${tilt})`\r\n      )\r\n      .style(\"opacity\", 0)\r\n      .each(function ({ levs, maxLev }) {\r\n        d3.select(this)\r\n          .selectAll(\"rect\")\r\n          .data(levs, (_, i) => i)\r\n          .attr(\"width\", maxLev * RAD_PX * 2)\r\n          .attr(\"height\", maxLev * RAD_PX * 2)\r\n          .attr(\"x\", (-maxLev * RAD_PX * 2) / 2)\r\n          .attr(\r\n            \"y\",\r\n            (l) =>\r\n              (maxLev * RAD_PX * 2) / 2 -\r\n              percentToRatioFilled(l / maxLev) * (maxLev * RAD_PX * 2)\r\n          );\r\n        d3.select(this)\r\n          .select(\"path\")\r\n          .attr(\r\n            \"transform\",\r\n            `scale(${\r\n              (maxLev * RAD_PX) / 2 / Math.SQRT2 / SVG_DROPLET_WIDTH_DONT_CHANGE\r\n            })`\r\n          );\r\n      })\r\n      .call((s) => {\r\n        s.transition()\r\n          .duration(({ dur }) => dur)\r\n          .ease(d3.easeLinear)\r\n          .attr(\r\n            \"transform\",\r\n            ({ endX, endY, tilt }) =>\r\n              `translate(${endX}, ${endY}) rotate(${tilt})`\r\n          )\r\n          .style(\"opacity\", 1);\r\n      });\r\n  }, [waterLevels, normalize]);\r\n\r\n  return (\r\n    <div className=\"bubbles-wrapper\">\r\n      <div className=\"bubbles-input-area\">\r\n        <select\r\n          value={curObjectiveIdx}\r\n          onChange={(e) => setCurObjectiveIdx(parseInt(e.target.value))}\r\n        >\r\n          {objectiveIDs.map((objectiveID, i) => (\r\n            <option name={i} value={i} key={i}>\r\n              {objectiveID}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"norm\"\r\n          checked={normalize}\r\n          onChange={() => void setNormalize((e) => !e)}\r\n        />\r\n        <label htmlFor=\"norm\">normalize</label>\r\n      </div>\r\n      <div className={\"bubbles-svg-wrapper\" + (watercolor ? \"-painter\" : \"\")}>\r\n        <svg\r\n          className={\"bubbles-svg\" + (watercolor ? \"-painter\" : \"\")}\r\n          ref={(e) => void (bucketSvgSelector.current = d3.select(e))}\r\n        ></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import * as d3 from \"d3\";\r\nimport { useRef } from \"react\";\r\n\r\n// inclusive\r\nexport function ticksExact(start, stop, count) {\r\n  return d3.range(count).map((i) => (i / (count - 1)) * (stop - start) + start);\r\n}\r\n\r\nexport function bucketPath(width, height, filled = 1.0, taper = 0.8) {\r\n  let bottomRight = width * taper + (width * (1 - taper)) / 2,\r\n    bottomLeft = (width * (1 - taper)) / 2;\r\n  let data = [\r\n    {\r\n      x: d3.interpolate(bottomRight, width)(filled),\r\n      y: d3.interpolate(height, 0)(filled),\r\n    },\r\n    { x: bottomRight, y: height },\r\n    { x: bottomLeft, y: height },\r\n    {\r\n      x: d3.interpolate(bottomLeft, 0)(filled),\r\n      y: d3.interpolate(height, 0)(filled),\r\n    },\r\n  ];\r\n  let lineFunc = d3\r\n    .line()\r\n    .x(function (d) {\r\n      return d.x;\r\n    })\r\n    .y(function (d) {\r\n      return d.y;\r\n    });\r\n  return lineFunc(data) + \"z\";\r\n}\r\n\r\nexport function quantileBins(numericBins, unitsPerQuantile, maxQuantiles) {\r\n  let quantileBins = numericBins.map((bin) =>\r\n    Math.round(bin.length / unitsPerQuantile)\r\n  );\r\n  let sum = d3.sum(quantileBins);\r\n\r\n  while (sum > maxQuantiles) {\r\n    quantileBins[\r\n      d3.minIndex(numericBins, (d, i) =>\r\n        d.length !== 0\r\n          ? d.length / unitsPerQuantile - quantileBins[i]\r\n          : Infinity\r\n      )\r\n    ] -= 1;\r\n\r\n    sum = d3.sum(quantileBins);\r\n  }\r\n\r\n  while (sum < maxQuantiles) {\r\n    quantileBins[\r\n      d3.maxIndex(numericBins, (d, i) =>\r\n        d.length !== 0\r\n          ? d.length / unitsPerQuantile - quantileBins[i]\r\n          : -Infinity\r\n      )\r\n    ] += 1;\r\n\r\n    sum = d3.sum(quantileBins);\r\n  }\r\n\r\n  return quantileBins;\r\n}\r\n\r\n// https://www.developerway.com/posts/implementing-advanced-use-previous-hook\r\nexport function usePrevious(value, isEqualFunc) {\r\n  // initialise the ref with previous and current values\r\n  const ref = useRef({\r\n    value: value,\r\n    prev: null,\r\n  });\r\n\r\n  const current = ref.current.value;\r\n\r\n  // if the value passed into hook doesn't match what we store as \"current\"\r\n  // move the \"current\" to the \"previous\"\r\n  // and store the passed value as \"current\"\r\n  if (isEqualFunc ? !isEqualFunc(value, current) : value !== current) {\r\n    ref.current = {\r\n      value: value,\r\n      prev: current,\r\n    };\r\n  }\r\n\r\n  // return the previous value only\r\n  return ref.current.prev;\r\n}\r\n\r\nexport const interpolateWatercolorBlue = (i) =>\r\n  d3.interpolateBlues(d3.scaleLinear([0.2, 1.0])(i));\r\n","import { mapBy } from \"../utils\";\r\n\r\nexport const MAX_DELIVS = 1200;\r\nexport const SCENARIO_KEY_STRING = \"scens\";\r\nexport const DELIV_KEY_STRING = \"delivs\";\r\n\r\nexport const objectivesData = await (async function () {\r\n  const objs = await (await fetch(\"./all_objectives.json\")).json();\r\n\r\n  for (const obj of objs) {\r\n    obj[SCENARIO_KEY_STRING] = obj[SCENARIO_KEY_STRING];\r\n    for (const scen of obj[SCENARIO_KEY_STRING]) {\r\n      scen[DELIV_KEY_STRING] = scen[DELIV_KEY_STRING].map((v) =>\r\n        Math.min(Math.max(0, v), MAX_DELIVS)\r\n      ).sort((a, b) => b - a);\r\n    }\r\n    obj[SCENARIO_KEY_STRING] = mapBy(\r\n      obj[SCENARIO_KEY_STRING],\r\n      ({ name }) => name\r\n    );\r\n  }\r\n\r\n  console.log(\"DATA: loading objectives data\");\r\n\r\n  return mapBy(objs, ({ obj }) => obj);\r\n})();\r\n","import * as d3 from \"d3\";\r\nimport Matter from \"matter-js\";\r\nimport { useCallback, useMemo, useState } from \"react\";\r\nimport { DELIV_KEY_STRING, SCENARIO_KEY_STRING } from \"./data/objectivesData\";\r\nimport { ticksExact } from \"./bucket-lib/utils\";\r\n\r\n// when fn is `({ name }) => name`, turns\r\n//\r\n//  [\r\n//    { name: \"Zeta\", age: 30 },\r\n//    { name: \"Aloy\", age: 40 },\r\n//  ];\r\n//\r\n// to\r\n//\r\n//  {\r\n//    \"Zeta\": { name: \"Zeta\", age: 30 },\r\n//    \"Aloy\": { name: \"Aloy\", age: 40 },\r\n//  };\r\nexport function mapBy(objs, fn) {\r\n  const newObjs = Object.groupBy(objs, fn);\r\n\r\n  for (const key of Object.keys(newObjs)) {\r\n    newObjs[key] = newObjs[key][0];\r\n  }\r\n\r\n  return newObjs;\r\n}\r\n\r\nexport const WATERDROP_ICON = {\r\n  draw: function (context, size) {\r\n    context.moveTo(0, -size / 2);\r\n    context.lineTo(size / 4, -size / 4);\r\n\r\n    context.arc(0, 0, size / Math.sqrt(2) / 2, -Math.PI / 4, (Math.PI * 5) / 4);\r\n    context.lineTo(0, -size / 2);\r\n    context.closePath();\r\n  },\r\n};\r\n\r\nexport function percentToRatioFilled(p) {\r\n  return (3.1304 * p ** 3 - 4.2384 * p ** 2 + 3.3471 * p + 0.0298) / 2.4;\r\n}\r\n\r\nexport function kernelDensityEstimator(kernel, X) {\r\n  return function (V) {\r\n    return X.map(function (x) {\r\n      return [\r\n        x,\r\n        d3.mean(V, function (v) {\r\n          return kernel(x - v);\r\n        }),\r\n      ];\r\n    });\r\n  };\r\n}\r\n\r\nexport function kernelEpanechnikov(k) {\r\n  return function (v) {\r\n    return Math.abs((v /= k)) <= 1 ? (0.75 * (1 - v * v)) / k : 0;\r\n  };\r\n}\r\n\r\nfunction generateWaterdrop(width) {\r\n  const rad = width / 2;\r\n  const partitions = 16;\r\n  const delta = (Math.PI * 3) / 2 / partitions;\r\n\r\n  const outer = [\r\n    {\r\n      x: Math.cos((Math.PI * 5) / 4) * rad,\r\n      y: Math.sin((Math.PI * 5) / 4) * rad,\r\n    },\r\n    {\r\n      x: 0,\r\n      y: -Math.SQRT2 * rad,\r\n    },\r\n  ];\r\n\r\n  for (let i = 0; i <= partitions; i++) {\r\n    outer.push({\r\n      x: Math.cos(i * delta - Math.PI / 4) * rad,\r\n      y: Math.sin(i * delta - Math.PI / 4) * rad,\r\n    });\r\n  }\r\n\r\n  return outer;\r\n}\r\n\r\nexport function generateRandoPoints(shape, count) {\r\n  const bounds = Matter.Bounds.create(shape);\r\n\r\n  const minX = bounds.min.x,\r\n    maxX = bounds.max.x,\r\n    minY = bounds.min.y,\r\n    maxY = bounds.max.y;\r\n\r\n  const genX = d3.scaleLinear([minX, maxX]);\r\n  const genY = d3.scaleLinear([minY, maxY]);\r\n\r\n  const points = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    while (true) {\r\n      const x = genX(Math.random());\r\n      const y = genY(Math.random());\r\n\r\n      if (Matter.Vertices.contains(shape, { x, y })) {\r\n        points.push([x, y]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return points;\r\n}\r\n\r\n// inner diameter of 1\r\nexport const WATERDROP_CAGE_COORDS = (function () {\r\n  const outer = generateWaterdrop(3);\r\n  const inner = generateWaterdrop(1);\r\n\r\n  const coords = [];\r\n\r\n  for (let i = 0; i < outer.length - 2; i++) {\r\n    coords.push([\r\n      outer[i],\r\n      outer[i + (i < 2 ? 1 : 2)],\r\n      inner[i + (i < 2 ? 1 : 2)],\r\n      inner[i],\r\n    ]);\r\n  }\r\n\r\n  return coords;\r\n})();\r\n\r\nlet RANDO_CACHE;\r\nlet lastNodesLen;\r\n\r\n// assuming nodes is already ordered and first nodes are going to be put on the bottom\r\nexport function placeDropsUsingPhysics(x, y, nodes) {\r\n  // first generate random points within water droplet. we can stop here, but points might not be the most uniformly distributed\r\n\r\n  if (!RANDO_CACHE || nodes.length !== lastNodesLen)\r\n    RANDO_CACHE = d3\r\n      .range(4)\r\n      .map(() =>\r\n        generateRandoPoints(generateWaterdrop(1), (lastNodesLen = nodes.length))\r\n      );\r\n\r\n  const AREA = d3.sum(nodes.map(({ r }) => r ** 2 * 3.14));\r\n  const WIDTH_AREA = Math.floor((Math.sqrt(AREA / 3.14) * 2) / 2);\r\n\r\n  const randoPoints = RANDO_CACHE[\r\n    Math.floor(Math.random() * RANDO_CACHE.length)\r\n  ].map(([x, y]) => [x * WIDTH_AREA, y * WIDTH_AREA]);\r\n\r\n  // thus, we use physics engine to take care of distributing the points evenly and based on radius\r\n  const Engine = Matter.Engine,\r\n    Bodies = Matter.Bodies,\r\n    Composite = Matter.Composite;\r\n\r\n  const engine = Engine.create();\r\n\r\n  const nodePos = randoPoints.sort((a, b) => b[1] - a[1]);\r\n\r\n  const node_bodies = nodes.map(({ r, id }, i) => {\r\n    const [nx, ny] = nodePos[i];\r\n    return Bodies.circle(nx, ny, r, {\r\n      restitution: 0,\r\n      id: id,\r\n    });\r\n  });\r\n\r\n  const parts = WATERDROP_CAGE_COORDS.map((quad) =>\r\n    Matter.Body.create({\r\n      position: Matter.Vertices.centre(quad),\r\n      vertices: quad,\r\n      isStatic: true,\r\n    })\r\n  );\r\n\r\n  const cage = Matter.Body.create({\r\n    isStatic: true,\r\n  });\r\n\r\n  Matter.Body.setParts(cage, parts);\r\n\r\n  Matter.Body.setCentre(cage, { x: 0, y: 0 });\r\n  Matter.Body.scale(cage, WIDTH_AREA * 1.1, WIDTH_AREA * 1.1);\r\n\r\n  Composite.add(engine.world, [...node_bodies, cage]);\r\n\r\n  // run engine for SECS second at FPS fps\r\n  for (let i = 0, FPS = 60, SECS = 0.3; i < FPS * SECS; i++)\r\n    Engine.update(engine, 1000 / FPS);\r\n\r\n  return node_bodies.map(({ position, id }) => ({\r\n    id,\r\n    x: position.x + x,\r\n    y: position.y + y + WIDTH_AREA * 0.1,\r\n  }));\r\n}\r\n\r\n// https://gist.github.com/mbostock/5743979\r\nexport function bounce(h) {\r\n  if (!arguments.length) h = 0.25;\r\n  var b0 = 1 - h,\r\n    b1 = b0 * (1 - b0) + b0,\r\n    b2 = b0 * (1 - b1) + b1,\r\n    x0 = 2 * Math.sqrt(h),\r\n    x1 = x0 * Math.sqrt(h),\r\n    x2 = x1 * Math.sqrt(h),\r\n    t0 = 1 / (1 + x0 + x1 + x2),\r\n    t1 = t0 + t0 * x0,\r\n    t2 = t1 + t0 * x1,\r\n    m0 = t0 + (t0 * x0) / 2,\r\n    m1 = t1 + (t0 * x1) / 2,\r\n    m2 = t2 + (t0 * x2) / 2,\r\n    a = 1 / (t0 * t0);\r\n  return function (t) {\r\n    return t >= 1\r\n      ? 1\r\n      : t < t0\r\n      ? a * t * t\r\n      : t < t1\r\n      ? a * (t -= m0) * t + b0\r\n      : t < t2\r\n      ? a * (t -= m1) * t + b1\r\n      : a * (t -= m2) * t + b2;\r\n  };\r\n}\r\n\r\nexport function rangeInclusive(a, b) {\r\n  return d3.range(a, b + 1);\r\n}\r\n\r\nexport function useStickyScale(defaultVal, scale) {\r\n  const [val, setVal] = useState(defaultVal);\r\n\r\n  const valActual = useMemo(() => scale(val), [val]);\r\n  const setValActual = useCallback((v) => void setVal(scale(v)), []);\r\n\r\n  return [valActual, setValActual];\r\n}\r\n\r\nexport function createInterps(name, curScen, data, maxDelivs) {\r\n  const delivs = data[name][SCENARIO_KEY_STRING][curScen][DELIV_KEY_STRING];\r\n  return d3\r\n    .scaleLinear()\r\n    .domain(ticksExact(0, 1, delivs.length))\r\n    .range(delivs.map((v) => Math.min(1, v / maxDelivs) || 0))\r\n    .clamp(true);\r\n}\r\n\r\nexport function criteriaSort(criteria, data, objective) {\r\n  if (criteria === \"median\") {\r\n    return Object.keys(data[objective][SCENARIO_KEY_STRING]).sort(\r\n      (a, b) =>\r\n        d3.mean(data[objective][SCENARIO_KEY_STRING][a][DELIV_KEY_STRING]) -\r\n        d3.mean(data[objective][SCENARIO_KEY_STRING][b][DELIV_KEY_STRING])\r\n    );\r\n  }\r\n  if (criteria === \"deliveries\") {\r\n    return Object.keys(data[objective][SCENARIO_KEY_STRING]).sort(\r\n      (a, b) =>\r\n        d3.max(data[objective][SCENARIO_KEY_STRING][a][DELIV_KEY_STRING]) -\r\n        d3.max(data[objective][SCENARIO_KEY_STRING][b][DELIV_KEY_STRING])\r\n    );\r\n  }\r\n}\r\n"],"names":["LEVELS","DEFAULT_OBJECTIVE_IDX","RAD_PX","DROPLET_SHAPE","SVG_DROPLET_WIDTH_DONT_CHANGE","RecursiveDropletsBasicApp","_ref","watercolor","current","objectiveIDs","useRef","Object","keys","objectivesData","winDim","curObjectiveIdx","setCurObjectiveIdx","useState","normalize","setNormalize","searchParams","setSearchParams","useSearchParams","bucketSvgSelector","orderedScenIDs","useMemo","criteriaSort","reverse","waterLevels","map","s","i","createInterps","MAX_DELIVS","ticksExact","d","j","useLayoutEffect","width","window","innerWidth","height","innerHeight","attr","get","includes","indexOf","nodes","placeDropsUsingPhysics","levs","idx","r","id","_ref2","x","y","w","maxLev","Math","max","tilt","random","dur","startX","startY","endX","endY","selectAll","data","_","join","enter","append","each","_ref3","d3","this","concat","interpolateWatercolorBlue","_ref4","style","_ref5","l","percentToRatioFilled","select","SQRT2","call","transition","duration","_ref6","ease","_ref7","_jsxs","className","children","_jsx","value","onChange","e","parseInt","target","objectiveID","name","type","checked","htmlFor","ref","start","stop","count","bucketPath","filled","arguments","length","undefined","taper","bottomRight","bottomLeft","lineFunc","quantileBins","numericBins","unitsPerQuantile","maxQuantiles","bin","round","sum","Infinity","usePrevious","isEqualFunc","prev","SCENARIO_KEY_STRING","DELIV_KEY_STRING","async","objs","fetch","json","obj","scen","v","min","sort","a","b","mapBy","console","log","fn","newObjs","groupBy","key","WATERDROP_ICON","draw","context","size","moveTo","lineTo","arc","sqrt","PI","closePath","p","kernelDensityEstimator","kernel","X","V","kernelEpanechnikov","k","abs","generateWaterdrop","rad","delta","outer","cos","sin","push","generateRandoPoints","shape","bounds","Matter","create","minX","maxX","minY","maxY","genX","genY","points","contains","WATERDROP_CAGE_COORDS","inner","coords","RANDO_CACHE","lastNodesLen","AREA","WIDTH_AREA","floor","randoPoints","Engine","Bodies","Composite","engine","nodePos","node_bodies","nx","ny","circle","restitution","parts","quad","position","centre","vertices","isStatic","cage","setParts","setCentre","scale","add","world","FPS","SECS","update","useStickyScale","defaultVal","val","setVal","useCallback","curScen","maxDelivs","delivs","domain","range","clamp","criteria","objective"],"sourceRoot":""}