{"version":3,"file":"static/js/514.9a7d7dfd.chunk.js","mappings":"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","sources":["bucket-lib/DropletGlyph.jsx","utils/explanation-anim/render-utils.jsx","../node_modules/react-scrollama/src/utils.js","../node_modules/react-scrollama/src/DebugOffset.js","../node_modules/react-scrollama/src/Scrollama.js","../node_modules/react-scrollama/node_modules/react-intersection-observer/react-intersection-observer.modern.mjs","../node_modules/react-scrollama/src/Step.js"],"sourcesContent":["import * as d3 from \"d3\";\r\nimport { useLayoutEffect, useRef } from \"react\";\r\n\r\nimport {\r\n  bucketGlyph,\r\n  bucketShape,\r\n  drawDroplet,\r\n  transitionSway,\r\n} from \"./bucket-glyph\";\r\nimport { interpolateWatercolorBlue, levelToDropletLevel } from \"./utils\";\r\n\r\nimport { ticksExact } from \"./utils\";\r\n\r\nconst LEVELS = 10;\r\n\r\nexport default function DropletGlyph({\r\n  levelInterp,\r\n  colorInterp = interpolateWatercolorBlue,\r\n  width = 200,\r\n  height = 400,\r\n  resolution = LEVELS,\r\n}) {\r\n  const LINE_WIDTH = 3;\r\n  const innerWidth = width - LINE_WIDTH * 2;\r\n  const innerHeight = height - LINE_WIDTH;\r\n\r\n  const svgElement = useRef();\r\n\r\n  useLayoutEffect(function initialize() {\r\n    const svgContainer = svgElement.current\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .append(\"g\")\r\n      .attr(\"class\", \"bucket\")\r\n      .attr(\"transform\", `translate(${LINE_WIDTH}, ${LINE_WIDTH / 2})`);\r\n\r\n    svgContainer.call(bucketShape(innerWidth, innerHeight, drawDroplet));\r\n  }, []);\r\n\r\n  useLayoutEffect(\r\n    function onDataChange() {\r\n      const liquidLevels = ticksExact(0, 1, resolution + 1).map((d) =>\r\n        levelInterp(d)\r\n      );\r\n\r\n      const glyph = bucketGlyph(innerWidth, innerHeight, levelToDropletLevel);\r\n\r\n      const liquids = svgElement.current\r\n        .select(\".graph-area\")\r\n        .selectAll(\".bucket-box\")\r\n        .data(glyph(liquidLevels))\r\n        .join(\"rect\")\r\n        .attr(\"class\", \"bucket-box\")\r\n        .attr(\"width\", (d) => d.width)\r\n        .attr(\"height\", (d) => d.height)\r\n        .attr(\"x\", (d) => d.x)\r\n        .attr(\"fill\", (_, i) => colorInterp(i / resolution));\r\n\r\n      transitionSway(liquids, 200 / height).attr(\"y\", (d) => d.y);\r\n    },\r\n    [levelInterp]\r\n  );\r\n\r\n  return (\r\n    <div className=\"waterdrop-wrapper\">\r\n      <svg ref={(e) => void (svgElement.current = d3.select(e))}></svg>\r\n    </div>\r\n  );\r\n}\r\n","import * as d3 from \"d3\";\r\n\r\nconst CIRC_RAD = Math.SQRT1_2;\r\nconst DROP_RAD = 1;\r\nconst CIRC_HEIGHT = CIRC_RAD + CIRC_RAD;\r\nconst DROP_HEIGHT = DROP_RAD + CIRC_RAD;\r\nconst HAT_START = (CIRC_RAD + DROP_RAD / 2) / DROP_HEIGHT;\r\n\r\n// half width at widest is 1\r\nfunction yToHalfWidth(y) {\r\n  if (y >= HAT_START) {\r\n    const hatHalfWidth = Math.SQRT1_2;\r\n\r\n    return (hatHalfWidth * (1 - y)) / (1 - HAT_START);\r\n  }\r\n\r\n  const circFrac = fracDropToCirc(y);\r\n  const trigX = (1 - circFrac) * 2 - 1;\r\n\r\n  const angle = Math.acos(trigX);\r\n  const trigY = Math.sin(angle);\r\n\r\n  return trigY;\r\n}\r\n\r\n// fml, here sprite width is 2 (i.e. circ rad is 1) thus drop real height is 1 + sqrt2\r\nfunction yToSpriteY(y) {\r\n  return (y - CIRC_RAD / DROP_HEIGHT) * (1 + Math.SQRT2);\r\n}\r\n\r\nfunction spriteYToY(sy) {\r\n  return sy / (1 + Math.SQRT2) + CIRC_RAD / DROP_HEIGHT;\r\n}\r\n\r\nfunction fracCircToDrop(v) {\r\n  return v / CIRC_HEIGHT / DROP_HEIGHT;\r\n}\r\n\r\nfunction fracDropToCirc(v) {\r\n  return v / (CIRC_HEIGHT / DROP_HEIGHT);\r\n}\r\n\r\nexport function waterdropDeltaOutline(yStart, yEnd, size = 2, subdivs = 10) {\r\n  if (Math.abs(yStart - yEnd) < 0.01) return [];\r\n\r\n  const rad = (size / 2 / DROP_RAD) * CIRC_RAD;\r\n\r\n  const Y_DELTA = 1 / subdivs;\r\n\r\n  const rightCoords = [];\r\n  const leftCoords = [];\r\n\r\n  let dx1, dy1, dx2, dy2;\r\n\r\n  for (let i = 1; i <= Math.ceil(1 / Y_DELTA); i++) {\r\n    dx1 = yToHalfWidth(yStart + (i - 1) * Y_DELTA);\r\n    dy1 = yToSpriteY(yStart + (i - 1) * Y_DELTA);\r\n    dx2 = yToHalfWidth(yStart + i * Y_DELTA);\r\n    dy2 = yToSpriteY(yStart + i * Y_DELTA);\r\n\r\n    if (spriteYToY(dy2) >= yEnd) break;\r\n\r\n    // CC !\r\n    const v1 = [-dx1 * rad, -dy1 * rad],\r\n      v2 = [dx1 * rad, -dy1 * rad],\r\n      v3 = [dx2 * rad, -dy2 * rad],\r\n      v4 = [-dx2 * rad, -dy2 * rad];\r\n\r\n    rightCoords.push(v2, v3);\r\n    leftCoords.push(v1, v4);\r\n  }\r\n\r\n  dx2 = yToHalfWidth(yEnd);\r\n  dy2 = yToSpriteY(yEnd);\r\n\r\n  // CC !\r\n  const v1 = [-dx1 * rad, -dy1 * rad],\r\n    v2 = [dx1 * rad, -dy1 * rad],\r\n    v3 = [dx2 * rad, -dy2 * rad],\r\n    v4 = [-dx2 * rad, -dy2 * rad];\r\n\r\n  rightCoords.push(v2, v3);\r\n  leftCoords.push(v1, v4);\r\n\r\n  rightCoords.push(...leftCoords.reverse());\r\n\r\n  return rightCoords;\r\n}\r\n\r\nexport function showElems(elemStr, container, displayVal) {\r\n  (container || d3).selectAll(elemStr).style(\"display\", displayVal || \"block\");\r\n}\r\n\r\nexport function hideElems(elemStr, container) {\r\n  (container || d3).selectAll(elemStr).style(\"display\", \"none\");\r\n}\r\n\r\nexport function removeElems(elemStr, container) {\r\n  (container || d3).selectAll(elemStr).remove();\r\n}\r\n","export const isOffsetInPixels = offset => typeof offset === 'string' && offset.includes('px');\n","import React from 'react';\nimport { isOffsetInPixels } from './utils';\n\nconst markerStyles = {\n  position: 'fixed',\n  left: 0,\n  width: '100%',\n  height: 0,\n  borderTop: '2px dashed black',\n  zIndex: 9999,\n};\nconst offsetTextStyles = {\n  fontSize: '12px',\n  fontFamily: 'monospace',\n  margin: 0,\n  padding: 6,\n};\n\nconst useTop = offset => {\n  const offsetInPixels = isOffsetInPixels(offset);\n  if(offsetInPixels) {\n    return offset;\n  } else {\n    return `${offset * 100}%`\n  }\n}\n\nconst DebugOffset = ({ offset }) => {\n  const top = useTop(offset);\n  return (\n    <div style={{ ...markerStyles, top, }}>\n      <p style={offsetTextStyles}>trigger: {offset}</p>\n    </div>\n  );\n}\n\nexport default DebugOffset;\n","import React, { useMemo, useState } from 'react';\nimport DebugOffset from './DebugOffset';\nimport { isOffsetInPixels } from './utils';\n\nconst createThreshold = (theta, height) => {\n  const count = Math.ceil(height / theta);\n  const t = [];\n  const ratio = 1 / count;\n  for (let i = 0; i <= count; i += 1) {\n    t.push(i * ratio);\n  }\n  return t;\n};\n\nconst Scrollama = props => {\n  const {\n    debug,\n    children,\n    offset = 0.3,\n    onStepEnter = () => {},\n    onStepExit = () => {},\n    onStepProgress = null,\n    threshold = 4,\n  } = props;\n  const isOffsetDefinedInPixels = isOffsetInPixels(offset)\n  const [lastScrollTop, setLastScrollTop] = useState(0);\n  const [windowInnerHeight, setWindowInnerHeight] = useState(null);\n\n  const handleSetLastScrollTop = (scrollTop) => {\n    setLastScrollTop(scrollTop);\n  };\n\n  const handleWindowResize = (e) => {\n    setWindowInnerHeight(window.innerHeight)\n  }\n\n  React.useEffect(() => {\n    if(isOffsetDefinedInPixels) {\n      window.addEventListener('resize', handleWindowResize);\n      return () => {\n        window.removeEventListener('resize', handleWindowResize);\n      };\n    }\n  }, []);\n\n  const isBrowser = typeof window !== \"undefined\";\n  const innerHeight = isBrowser ? (windowInnerHeight || window.innerHeight) : 0;\n\n  const offsetValue = isOffsetDefinedInPixels\n    ? (+offset.replace('px', '') / innerHeight)\n    : offset;\n\n  const progressThreshold = useMemo(() => createThreshold(threshold, innerHeight), [innerHeight]);\n\n  return (\n    <React.Fragment>\n      {debug && <DebugOffset offset={offset} />}\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          scrollamaId: `react-scrollama-${i}`,\n          offset: offsetValue,\n          onStepEnter,\n          onStepExit,\n          onStepProgress,\n          lastScrollTop,\n          handleSetLastScrollTop,\n          progressThreshold,\n          innerHeight\n        });\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default Scrollama;\n","import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  const unobserve = React.useRef();\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n  callback.current = onChange;\n  const setRef = React.useCallback(node => {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, (inView, entry) => {\n        setState({\n          inView,\n          entry\n        });\n        if (callback.current) callback.current(inView, entry);\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root,\n        rootMargin,\n        threshold,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n","import React, { useState, useMemo, useCallback, useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nconst useRootMargin = offset => {\n  return `-${offset * 100}% 0px -${100 - offset * 100}% 0px`;\n}\n\nconst useProgressRootMargin = (direction, offset, node, innerHeight) => {\n  if (!node.current) return '0px';\n  const offsetHeight = (node.current.offsetHeight / innerHeight);\n  if (direction === 'down') return `${(offsetHeight - offset) * 100}% 0px ${(offset * 100) - 100}% 0px`;\n  return `-${offset * 100}% 0px ${(offsetHeight * 100) - (100 - (offset * 100))}% 0px`;\n}\n\nconst Step = props => {\n  const {\n    children,\n    data,\n    handleSetLastScrollTop,\n    lastScrollTop,\n    onStepEnter = () => {},\n    onStepExit = () => {},\n    onStepProgress = null,\n    offset,\n    scrollamaId,\n    progressThreshold,\n    innerHeight,\n  } = props;\n\n  const isBrowser = typeof window !== \"undefined\";\n  const scrollTop = isBrowser ? document.documentElement.scrollTop : 0;\n  const direction = lastScrollTop < scrollTop ? 'down' : 'up';\n\n  const rootMargin = useRootMargin(offset);\n\n  const ref = useRef(null);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  const {ref: inViewRef, entry} = useInView({\n    rootMargin,\n    threshold: 0,\n  });\n\n  const progressRootMargin = useMemo(\n    () => useProgressRootMargin(direction, offset, ref, innerHeight),\n    [direction, offset, ref, innerHeight]\n  );\n\n  const {ref: scrollProgressRef, entry: scrollProgressEntry} = useInView({\n    rootMargin: progressRootMargin,\n    threshold: progressThreshold,\n  });\n\n  const setRefs = useCallback(\n    (node) => {\n      ref.current = node;\n      inViewRef(node);\n      scrollProgressRef(node)\n    },\n    [inViewRef, scrollProgressRef],\n  );\n\n\n  React.useEffect(() => {\n    if (isIntersecting) {\n      const { height, top } = scrollProgressEntry.target.getBoundingClientRect();\n      const progress = Math.min(1, Math.max(0, (window.innerHeight * offset - top) / height));\n      onStepProgress &&\n      onStepProgress({\n        progress,\n        scrollamaId,\n        data,\n        element: scrollProgressEntry.target,\n        entry: scrollProgressEntry,\n        direction,\n      });\n    }\n  }, [scrollProgressEntry]);\n\n  React.useEffect(() => {\n    if (entry && !entry.isIntersecting && isIntersecting) {\n      onStepExit({ element: entry.target, scrollamaId, data, entry, direction });\n      setIsIntersecting(false);\n      handleSetLastScrollTop(scrollTop)\n    } else if (entry && entry.isIntersecting && !isIntersecting) {\n      setIsIntersecting(true);\n      onStepEnter({ element: entry.target, scrollamaId, data, entry, direction});\n      handleSetLastScrollTop(scrollTop)\n    }\n  }, [entry]);\n\n  return React.cloneElement(React.Children.only(children), {\n    'data-react-scrollama-id': scrollamaId,\n    ref: setRefs,\n    entry,\n  });\n};\n\nexport default Step;\n"],"names":["LEVELS","DropletGlyph","_ref","levelInterp","colorInterp","interpolateWatercolorBlue","width","height","resolution","innerWidth","LINE_WIDTH","innerHeight","svgElement","useRef","useLayoutEffect","current","attr","append","concat","call","bucketShape","drawDroplet","liquidLevels","ticksExact","map","d","glyph","bucketGlyph","levelToDropletLevel","liquids","select","selectAll","data","join","x","_","i","transitionSway","y","_jsx","className","children","ref","e","d3","Math","SQRT1_2","showElems","elemStr","container","displayVal","style","hideElems","isOffsetInPixels","offset","includes","markerStyles","position","left","borderTop","zIndex","offsetTextStyles","fontSize","fontFamily","margin","padding","DebugOffset","top","useTop","React__default","_objectSpread2","Scrollama","props","debug","_props$offset","_props$onStepEnter","onStepEnter","_props$onStepExit","onStepExit","_props$onStepProgress","onStepProgress","_props$threshold","threshold","isOffsetDefinedInPixels","_useState2","_slicedToArray","useState","lastScrollTop","setLastScrollTop","_useState4","windowInnerHeight","setWindowInnerHeight","handleSetLastScrollTop","scrollTop","handleWindowResize","window","addEventListener","removeEventListener","offsetValue","replace","progressThreshold","useMemo","theta","count","ceil","t","ratio","push","createThreshold","child","scrollamaId","observerMap","Map","RootIds","WeakMap","unsupportedValue","rootId","optionsToId","options","Object","keys","sort","filter","key","undefined","root","has","set","toString","get","observe","element","callback","arguments","length","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_elements$get","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","splice","indexOf","delete","unobserve","size","disconnect","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","React","state","setState","setRef","node","result","Step","document","documentElement","direction","useRootMargin","setIsIntersecting","_useInView","inViewRef","_useInView2","offsetHeight","useProgressRootMargin","scrollProgressRef","scrollProgressEntry","setRefs","useCallback","_scrollProgressEntry$","progress","min","max","only"],"sourceRoot":""}